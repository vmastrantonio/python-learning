#### Tipos primitivos
    #   int()   -> Utilizado para representar números inteiros.     Exp: 17, 21, 35, 42.
    #   float() -> Usado para números de ponto flutuante.           Exp: 2.3, 1.6, 14.9, 67.1.
    #   bool()  -> Armazena valores booleanos.                      Exp: True ou False.
    #   str()   -> Representa conjuntos de caracteres.              Exp: 'frase', '123', '  xx  '.
    #   type()  -> Retorna o tipo primitivo de uma variável.        Exp: frase = 'oi' print(type(frase)) indica que seu tipo primitivo é string.

###  Operadores Aritméticos 
    #   Potencia            **
    #   Multiplicação       *   
    #   Divisão             /
    #   Divisão inteira     //
    #   Resto da divisão    %
    #   Adição              + 
    #   Subtração           -

### Ordem de Precedência
    #   1°  '()'
    #   2°  '**'
    #   3°  '*', '/', '//', '%'
    #   4°  '+', '-'

###  Módulos 
    # import math, random           -> Importa bibliotecas inteiras específicas.
    # from math import cin, cos     -> Importa funções específicas de uma biblioteca.

    ## Biblioteca Math
        # sqrt()                    -> Calcula a raiz quadrada de um número.                        Exp: math.sqrt(numero)
        # floor()                   -> Arredonda o número para o valor inteiro inferior.            Exp: 5.23 torna-se 5.00.
        # ceil()                    -> Retorna o valor inteiro superior.                            Exp: 5.23 em 6.
        # hypot()                   -> Calcula a hipotenusa dos catetos.                            Exp: math.hypot(co, ca).
        # pow()                     -> Realiza a potenciação de um número.                          Exp: pow(2, 3) ou seja, 2³ ou seja, 8.
        # radians()                 -> Converte ângulos em graus para radianos.                     Exp: math.radians(180).
        # sin()                     -> Retorna o seno de um ângulo em radianos.                     Exp: math.sin(30).
        # cos()                     -> Retorna o cosseno de um ângulo em radianos.                  Exp: math.cos(30).
        # tan()                     -> Retorna a tangente de um ângulo em radianos.                 Exp: math.tan(30).

    ## Biblioteca random
        # randint()                 -> Gera um número inteiro dentro de um intervalo.                           Exp: random.randint(1, 10).
        # choice()                  -> Escolhe um elemento aleatório de uma sequência.                          Exp: random.choice(x).
        # shuffle()                 -> Embaralha uma sequência, reorganizando os elementos no lugar.            Exp: random.shuffle(y).

###  Manipulando Textos 
    # frase = 'Esse é um exemplo de frase'

    ## Fatiamento
        # frase[10]                 -> Retorna o carácter na posição especificada.                                                  Exp: 'e'.
        # frase[10:17]              -> Retorna os caracteres no intervalo especificado.                                             Exp: 'exemplo'.
        # frase[10:26:2]            -> Retorna os caracteres no intervalo especificado com um intervalo de especificado.            Exp: 'eepod rs'.

    ## Análise
        # len()                     -> Mostra o comprimento da frase.                                           Exp: len(frase) = 38 caracteres.
        # find()                    -> Procura por uma substring na frase e retorna a posição inicial.          Exp: frase.find('exemplo').
        # rfind()                   -> Procura por uma substring na frase e retorna a ultima posição.           Exp: frase.rfind('exemplo').
        # count()                   -> Conta quantas vezes uma letra ou substring aparece na frase.             Exp: frase.count('s').

    ## Transformação
        # upper()                   -> Converte todos os caracteres para maiúsculas.                        Exp: frase.upper().
        # lower()                   -> Converte todos os caracteres para minúsculas.                        Exp: frase.lower().
        # capitalize()              -> Coloca toda a frase em minúsculas, exceto a primeira letra.          Exp: frase.capitalize().
        # title()                   -> Inicia todas as palavras com letras maiúsculas.                      Exp: frase.title().
        # replace()                 -> Substitui uma palavra por outra na frase.                            Exp: frase.replace('python','JavaScript').
        # strip()                   -> Remove espaços em branco no início e no final da frase.              Exp: frase.strip()
        # lstrip()                  -> Remove espaços em branco do lado esquerdo da frase.                  Exp: frase.lstrip()
        # rstrip()                  -> Remove espaços em branco do lado direito da frase.                   Exp: frase.rstrip()

    ## Divisão
        # split()                   -> Divide uma string em substrings, usando espaços em branco como padrão, e cria uma lista.         Exp: frase.split().
            # Pode receber dois atributos, que definem respectivamente o carácter a ser utilizado como referência para o corte, e o número de cortes

    ## Junção
        # .join()                   -> Combina elementos de uma sequência com uma string.           Exp: ''.join(frase) resultando em 'Esseéumexemplodefrase'.

### Laços de repetição
	## for (O loop "for" é utilizado para iterar por uma sequência (como uma lista, tupla, string, ou range) e executar um bloco de código para cada item na sequência.)
		for ITEM in LISTA:                          -> Verifica cada elemento dentro de uma estrutura de dados.
        for ITERAÇÃO in RANGE(X,Y,Z):               -> Executa uma sequência de comandos por um número delimitado de vezes, estipulado através de X (Ponto inicial), Y (Ponto final) e Z (Passo)
        for KEY, VALUE in enumerate(LISTA):         -> Obtem e permite manipular tanto o indice quanto o conteúdo de uma determinada estrutura de dados.
        for ITEM1, ITEM2 in zip(LISTA1, LISTA2):    -> Itera simultaneamente sobre várias estruturas de dados em paralelo.

        break                                       -> Interrompe imediatamente e saí do loop.
        continue                                    -> Pula a iteração atual e continua com a próxima iteração do loop.
        else                                        -> Define o próximo bloco de código a ser executado após finalizar a iteração naturalmente (Sem a utilização de break)

	## while (O loop "while" é utilizado para executar um bloco de código repetidamente enquanto uma condição específica for verdadeira.)
        while condicao:         -> Enquanto a variavel condicao for verdadeira executa um determinado bloco de código.
        while True:             -> Cria um loop infinito
        
        break                   -> Interrompe imediatamente e saí do loop.
        continue                -> Pula a iteração atual e continua com a próxima iteração do loop.
		else                    -> Define o próximo bloco de código a ser executado após finalizar a iteração naturalmente (Sem a utilização de break)

### Variaveis Compostas
	## Tuplas ( ) (Uma tupla serve para armazenar uma determinada quantidade de diferentes dados em uma mesma variavél, tuplas são imutáveis, ou seja, inalteráveis após sua nomeação.)
        # len
		# index()			-> Retorna a posição do primeiro elemento retornado
		# del
		# count('dado')			-> Conta quantas vezes aparece determinada string na tupla
        # sorted
        # max
        # min

    ## Listas [ ] (Listas tem a mesma função de armazenar variáveis do que as tuplas, porém são mutáveis. Podem ser alteradas, adicionadas ou removidas)
        # list()            -> Cria uma lista para determinada variável.                Exp: lista = list()
        # len               -> Verifica o número de itens dentro de uma lista
        # append            -> Adiciona um elemento no final de uma lista, ou faz uma ligação entre duas listas, para fazer uma cópia deve-se utilizar lista.append(lista_copiada[:])
        # insert(x, y)      -> Insere determinado elemento em determinada posição especifica da lista
        # pop               -> Deleta o ultimo elemento de uma lista
        # sort              -> Organiza uma lista em ordem crescente, ou sort(reverse=True) para ordem decrescente.
        # sorted            -> Organiza uma lista temporariamente para visualização, porém sem alterar sua ordem.
        # clear             -> Limpa uma lista, apagando todas informações

    # Dicionários { } (Dicionários tem a mesma função de armazenar variáveis do que as tuplas e as listas, é imutável, assim como as listas, porém você consegue personalizar além do elemento, o indice (posicionamento) dele.)
        # dict()                                -> Cria um dicionário para determinada variável.            Exp: dicionario = dict()
        # dicionario['nome'] = 'vitor'          -> Adiciona um valor para um item de um dicionário, caso ainda não exista, cria sozinho
        # del dicionario['nome']                -> Deleta uma chave de um dicionário, removendo seus valores
        # dicionario.copy()                     -> Faz uma cópia de um dicionário, para q
        # dicionario.values()                   -> Retorna todos os valores de um dicionário
        # dicionario.keys()                     -> Retorna todas as chaves de um dicionário
        # dicionario.items()                    -> Retorna todos os itens de um dicionário

### Funções
    * Toda variável declarada dentro de uma função terá escopo local, isto é, só tera valor dentro da própria função.
    # def NOME(x,y,z):          -> Define uma função com o nome especificado e com quantos parâmetros (x,y,z) quiser.
    # NOME(x,y,z)               -> Executa uma função, se não expecificar os parametros o programa sub-entende que você adicionou na ordem de recebimento.
    # NOME(y=1,x=2,z=4)         -> Executa uma função, podendo especificar os parâmetros, para não precisar adicionar na ordem.
    # def NOME(* num)           -> Cria uma túpula com todos elementos retornados, que podem ser infinitos.
    # def NOME(x=0, y=0, z=0)   -> Define parametros opcionais para uma função, ou seja, se não forem especificados na chamada da função, passarão a valer o que está após o símbolo de igual.
    # global VAR                -> Permite alterar o valor global de uma variável dentro de uma função, porém ela precisa ter sido declarada anteriormente fora da função 
    # return X                  -> Retorna, envia, para a chamada da função algo especificado após o return.            Exp: return 1 (Quando o usuário executar a função, se chegar no return, o return enviara "1" para o usuário)

### Modularização
    Todos arquivos .py podem ser mudularizados, desde que que contenham funções dentro. Para isso, devemos utilizar "import NOMEDOARQUIVO" para importarmos todas funções de determinado arquivo. Ou, "from NOMEDOARQUIVO import NOMEDAFUNÇÃO", porém o python recomenda a utilização da primeira maneira para evitar conflitos de nomes de funções importadas, e caso ocorra, passa a valer a ultima importação declarada com o mesmo nome.

### Pacotes
    Além da modularização, é possivel empacotar funções de um código em pacotes, é útil quando um único arquivo de modularização fica muito extenso, ou com assuntos diferentes. O pacote, permite criar grupos de funções e separar em pacotes. Para isso criamos pastas, com o nome do pacote (Podemos adicionar pacotes dentro de pacotes) e adicionamos um arquivo __init__.py dentro da pasta, que é onde o código daquele pacote deverá ser armazenado.

### Informações adicionais
    # help()                    -> No console, help() permite adicionar comandos para consultar a documentação, ou help(print) exibe a documentação da função especificada.
    # comando.__doc__           -> Exibe informações sobre determinado comando          Exp: print(input.__doc__)
    # """ doc """               -> Para criar uma docstring de uma função personaliza, você deve criar um print utilizando 3 aspas duplas abrindo e 3 fechando logo abaixo a declaração da função.